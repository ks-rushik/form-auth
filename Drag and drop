To add image upload via **drag and drop** using **Mantine** in your `Addmenu` modal, weâ€™ll do the following:

---

### âœ… Goal:

* Add an image upload field inside the modal using Mantine's `Dropzone`.
* Handle preview, validation, and upload with the rest of the form.
* Integrate with `react-hook-form`.

---

### ðŸ§© Steps to Modify:

1. **Install dependencies** (if not already):

```bash
npm install @mantine/dropzone
```

---

2. **Update `AddMenuSchema` to include an image field:**

```ts
const AddMenuSchema = z.object({
  menu_name: z
    .string()
    .nonempty(validation(lang?.menus.menuname!, "required", lang)),
  currency: z.enum(["$", "â‚¹", "â‚¬", "Â¥"], {
    errorMap: () => validation(lang?.menus.currency!, "required", lang),
  }),
  status: z.enum([Availablity.Available, Availablity.NotAvailable], {
    errorMap: () => validation(lang?.menus.status!, "required", lang),
  }),
  image: z
    .any()
    .refine((file) => file instanceof File || file === null, {
      message: validation(lang?.menus.image!, "required", lang),
    }),
});
```

---

3. **Update form type:**

```ts
type IAddMenuData = z.infer<typeof AddMenuSchema>;
```

---

4. **Add `Dropzone` in the form (inside your JSX):**

```tsx
<FormField name="image" error={errors.image?.message}>
  <Controller
    name="image"
    control={control}
    render={({ field }) => (
      <Dropzone
        onDrop={(files) => field.onChange(files[0])}
        onReject={() => field.onChange(null)}
        maxSize={3 * 1024 ** 2}
        accept={["image/*"]}
        multiple={false}
      >
        {(status) => (
          <div className="p-4 border border-dashed border-gray-300 rounded-md text-center">
            {field.value ? (
              <img
                src={URL.createObjectURL(field.value)}
                alt="preview"
                className="mx-auto max-h-40 object-contain"
              />
            ) : (
              <p className="text-gray-500">{lang?.menus.dragdroptext}</p>
            )}
          </div>
        )}
      </Dropzone>
    )}
  />
</FormField>
```

---

5. **Handle reset in `useEffect` & `handleClose`:**

In `useEffect`:

```ts
reset({
  menu_name: selectedMenu.menu_name,
  currency: selectedMenu.currency as "$" | "â‚¹" | "â‚¬" | "Â¥",
  status: selectedMenu.status as keyof typeof Availablity,
  image: null, // or map existing image if it's a URL
});
```

In `handleClose`:

```ts
reset({ menu_name: "", currency: undefined, status: undefined, image: null });
```

---

6. **Use image in `onSubmit`:**

```ts
const onSubmit = async (data: IAddMenuData) => {
  const formData = { ...data };
  if (selectedMenu) {
    const updatedItem = { ...selectedMenu, ...formData };
    await onEditMenu(updatedItem);
  } else {
    await onAddMenu(formData);
  }

  close();
  setSelectedMenu(null);
  reset({ menu_name: "", currency: undefined, status: undefined, image: null });
};
```

---

### ðŸ“¦ Optional Enhancement:

If youâ€™re storing image URLs (e.g. from a cloud upload), you can show previews even for previously saved images. Youâ€™ll just need to allow `image: File | string | null` and modify the preview logic accordingly.

---

Would you like me to generate this complete updated component for you?
