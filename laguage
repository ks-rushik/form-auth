"use client";

import Image from "next/legacy/image";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import { useEffect, useState } from "react";

import ChangePassword from "@components/auth/ChangePassword";
import LogOut from "@components/auth/Logout";
import ThemeButton from "@components/ui/ThemeButton";
import { Avatar, Menu } from "@mantine/core";

import { useThemeToggle } from "@/app/hook/useThemetoggle";
import logo3 from "@/app/images/logo3.png";

import BaseSelect from "../ui/BaseSelect";

const Navbar = () => {
  
    const [opened, setOpened] = useState(false);
    const [modalopened, setModalOpened] = useState(false);
  const { theme, toggleTheme, mounted } = useThemeToggle();
  const pathname = usePathname();
  const router = useRouter();

  const [selectedLanguage, setSelectedLanguage] = useState("English");

  const localeList = ["en", "hd", "sp"];
  const labelList = ["English", "Hindi", "Spanish"];

  // Sync selectedLanguage from current URL
  useEffect(() => {
    const currentLocale = pathname.split("/")[1];
    const index = localeList.indexOf(currentLocale);
    setSelectedLanguage(index !== -1 ? labelList[index] : "English");
  }, [pathname]);

  const handleLanguageChange = (value: string | null) => {
    if (!value) return;

    const index = labelList.indexOf(value);
    const newLocale = localeList[index];
    setSelectedLanguage(value);

    const segments = pathname.split("/").filter(Boolean);

    if (localeList.includes(segments[0])) {
      segments[0] = newLocale;
    } else {
      segments.unshift(newLocale);
    }

    router.push("/" + segments.join("/"));
  };

  return (
    <nav className="bg-white dark:bg-black/90 shadow-lg sticky top-0 z-20 py-2 px-4 flex justify-between items-center">
      <div className="flex items-center">
        <Image
          src={logo3}
          width={100}
          height={100}
          alt="Website Logo"
          className="dark:bg-black"
        />
      </div>

      <div className="flex flex-row items-center gap-4">
        <BaseSelect
          data={["English", "Hindi", "Spanish"]}
          defaultValue="English"
          value={selectedLanguage}
          size="small"
          classNames={{ root: "w-28" }}
          onChange={handleLanguageChange}
        />

        {mounted && <ThemeButton theme={theme!} onChange={toggleTheme} />}

        <Menu
          opened={opened}
          onChange={setOpened}
          zIndex={0}
          classNames={{ item: "font-[650] z-10 bg-white" }}
        >
          <Menu.Target>
            <Avatar
              src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png"
              alt="User Avatar"
              size="lg"
              classNames={{
                root: "transition cursor-pointer delay-100 duration-300 ease-in-out hover:-translate-y-1 hover:scale-110 xl:mr-1",
              }}
            />
          </Menu.Target>

          <Menu.Dropdown
            style={{ zIndex: 20 }}
            className="dark:bg-[#131414] dark:border-black"
            classNames={{ dropdown: "dark:!bg-gray-800" }}
          >
            <Menu.Item
              classNames={{
                item: "text-black dark:bg-gray-800 dark:text-white",
              }}
            >
              <Link href="/userprofile" className="block px-3 py-1">
                Profile Page
              </Link>
            </Menu.Item>
            <Menu.Item
              onClick={() => setModalOpened(true)}
              classNames={{ item: "dark:bg-gray-800 dark:text-white" }}
            >
              Change Password
            </Menu.Item>
            <Menu.Item component={LogOut}>LogOut</Menu.Item>
          </Menu.Dropdown>
        </Menu>

        <ChangePassword
          modalopened={modalopened}
          setModalOpened={setModalOpened}
        />
      </div>
    </nav>
  );
};

export default Navbar;



Great question!

✅ You want the **selected language (like `English`, `Hindi`, etc.) to stay the same** when navigating between pages.

To do this, there are two main things to handle:

---

## ✅ GOAL

> Whenever user switches the page (via Link or router.push), the selected language (`/en`, `/hd`, etc.) **should stay in the URL** and **dropdown should show the correct language.**

---

## ✅ You’ve already done this:

1. **Your URL contains the language prefix** (`/en/home`, `/hd/about`) ✅
2. **You set `selectedLanguage` using `useEffect` when `pathname` changes** ✅

```ts
useEffect(() => {
  const currentLocale = pathname.split("/")[1];
  const index = localeList.indexOf(currentLocale);
  setSelectedLanguage(index !== -1 ? labelList[index] : "English");
}, [pathname]);
```

This makes sure that the dropdown updates as per the URL — perfect.

---

## ✅ Now make sure page links **include the current language**

This is where most mistakes happen — if you just do `<Link href="/about">`, it goes to `/about`, **without the language code**.

So, you need to **build your links dynamically using the current locale**.

---

### ✅ Step-by-Step Fix

### 1. Get the current locale

Put this in your `Navbar` or a global layout/context (wherever you manage links):

```ts
const pathname = usePathname();
const currentLocale = pathname.split("/")[1]; // e.g., 'en' or 'hd'
```

### 2. Use it in links

```tsx
<Link href={`/${currentLocale}/about`}>About</Link>
<Link href={`/${currentLocale}/contact`}>Contact</Link>
```

✅ This way, you preserve the selected language as users navigate.

---

### ✅ Bonus (Reusability Tip)

If you use a lot of links, you can create a **helper function**:

```ts
const getLocalizedPath = (path: string) => `/${currentLocale}${path}`;
```

Then use it like:

```tsx
<Link href={getLocalizedPath("/about")}>About</Link>
<Link href={getLocalizedPath("/products")}>Products</Link>
```

---

### ✅ Summary

| What You Need                     | Done?                                    |
| --------------------------------- | ---------------------------------------- |
| Update dropdown on route change   | ✅ Already using `useEffect`              |
| Keep locale in URL during routing | ✅ Use `/${currentLocale}/page` in `href` |
| Reusable path helper (optional)   | ✅ Cleaner code                           |

---

Let me know if you want to use **middleware**, **context**, or **Next.js i18n routing** to manage this automatically — I can guide you through that too.
