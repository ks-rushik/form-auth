import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@mantine/core/styles.css";
import { MantineProvider } from "@mantine/core";
import "@mantine/notifications/styles.css";
import { Notifications } from "@mantine/notifications";
import "./../globals.css";
import QueryProvider from "../components/QueryProvider";
import Navbar from "../components/navbar/Navbar";
import { ThemeProvider } from "../context/ThemeProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function DashBoardLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
      <QueryProvider>
        <MantineProvider defaultColorScheme="auto">
          <Notifications position="top-right" />
          <ThemeProvider>  
          <Navbar />
          {children}
        </ThemeProvider>
        </MantineProvider>
      </QueryProvider>
  );
}


"use client";

import { useTheme } from "../../context/ThemeProvider";
import Link from "next/link";
import { Avatar, Menu, Button } from "@mantine/core";
import Image from "next/image";
import website from "../../images/website.svg";
import LogOut from "../auth/Logout";

const Navbar = () => {
  const { theme, toggleTheme } = useTheme(); // Get Theme from Context

  console.log("Navbar re-rendered, theme:", theme);  // ‚úÖ Debugging

  return (
    <nav className={`bg-white dark:bg-gray-900 border-b-2 border-gray-200 dark:border-gray-700 shadow-lg py-2 px-4 flex justify-between items-center`}>
      <div className="flex items-center">
        <Image src={website} width={100} height={100} alt="Website Logo" />
      </div>

      {/* Theme Toggle Button */}
      <Button onClick={toggleTheme} variant="outline" className="mr-4">
        {theme === "light" ? "üåô Dark Mode" : "‚òÄÔ∏è Light Mode"}
      </Button>

      <Menu>
        <Menu.Target>
          <Avatar
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png"
            alt="User Avatar"
            size={"lg"}
          />
        </Menu.Target>

        <Menu.Dropdown>
          <Menu.Item>
            <Link href="/userprofile">Profile Page</Link>
          </Menu.Item>
          <Menu.Item component={LogOut}>LogOut</Menu.Item>
        </Menu.Dropdown>
      </Menu>
    </nav>
  );
};

export default Navbar;


'use client';

import { useTheme } from "@/app/context/ThemeProvider";


export default function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();

  return (
    <button onClick={toggleTheme} className="p-2 rounded-full bg-gray-200 dark:bg-gray-800">
      {theme === 'light' ? "moon" : "sun"}
    </button>
  );
}


'use client';

import { useState, createContext, useContext, useEffect } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextProps {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light'); // Default to light mode

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
    document.documentElement.classList.toggle('dark');
    console.log("Theme changed to:", theme);  // ‚úÖ Debugging
  };

  useEffect(() => {
    console.log("ThemeProvider mounted with theme:", theme);  // ‚úÖ Debugging
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}



/* Enable dark mode */
:root {
  --background-light: #ffffff;
  --background-dark: #1a1a1a;
}

body {
  background-color: var(--background-light);
  color: black;
}

.dark body {
  background-color: var(--background-dark);
  color: white;
}


import type { Config } from "tailwindcss";

export default {
  darkMode: "class",
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        backgroundColor: '#F0F0F0',
        bgInput: '#f9eed164',
        Border : '#2a85ff',
        LabelColor: '#737380',
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;


"use client";

import { useEffect, useState, createContext } from "react";

type ITheme = "light" | "dark";

type IThemeContextProps = {
  theme: ITheme | null;
  toggleTheme: () => void;
};

export const ThemeContext = createContext<IThemeContextProps | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<ITheme | null>(null);

  // Ensure theme is set AFTER hydration
  useEffect(() => {
    const storedTheme = (localStorage.getItem("theme") as ITheme) || "light";
    setTheme(storedTheme);
    document.documentElement.classList.toggle("dark", storedTheme === "dark");
  }, []);

  const toggleTheme = () => {
    setTheme((prevTheme) => {
      const newTheme = prevTheme === "light" ? "dark" : "light";
      localStorage.setItem("theme", newTheme);
      document.documentElement.classList.toggle("dark", newTheme === "dark");
      return newTheme;
    });
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {theme !== null ? children : null} {/* Prevents SSR mismatch */}
    </ThemeContext.Provider>
  );
}

dark:fill-red-white dark:stroke-white dark:bg-black

import React, { useState } from "react";

const TableSearch = () => {
  const [search, setSearch] = useState("");
  
  const data = [
    { name: "John Doe", age: 25, city: "New York" },
    { name: "Jane Smith", age: 30, city: "Los Angeles" },
    { name: "Michael Brown", age: 28, city: "Chicago" }
  ];

  const filteredData = data.filter(row =>
    Object.values(row).some(value =>
      value.toString().toLowerCase().includes(search.toLowerCase())
    )
  );

  return (
    <div>
      <input
        type="text"
        placeholder="Search..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <table border="1">
        <thead>
          <tr>
            <th>Name</th>
            <th>Age</th>
            <th>City</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((row, index) => (
            <tr key={index}>
              <td>{row.name}</td>
              <td>{row.age}</td>
              <td>{row.city}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TableSearch;
