import { Divider } from "@mantine/core";
import React, { forwardRef } from "react";
import PdfSideHeader from "./PdfSideHeader";
import PdfSideCard from "./PdfSideCard";
import PdfSideLocation from "./PdfSideLocation";

type MenuContentProps = {
  filteredCategories: any[] | undefined;
  openCategories: string[];
  currency: string;
  logo: string;
  name: string;
};

// eslint-disable-next-line react/display-name
const Pdf = forwardRef<HTMLDivElement, MenuContentProps>(
  ({ filteredCategories, currency, logo, name }, ref) => {
    const contact = filteredCategories?.[0]?.menus?.restaurant_id?.phone;
    const location = filteredCategories?.[0]?.menus?.restaurant_id?.address;
    const email = filteredCategories?.[0]?.menus?.restaurant_id?.email;

    return (
      <div ref={ref} className="container px-4 mx-auto mb-10">
        <PdfSideHeader logo={logo} name={name} />
        <Divider size="sm" />
        <p className="text-4xl text-center tracking-widest font-thin pb-6">
          MENU
        </p>
        <Divider size="sm" className="mt-4" />

        {filteredCategories?.map((category) => (
          <div
            key={category.id}
            className="no-page-break"
          >
            <div className="bg-white p-4 rounded-lg shadow-2xl dark:bg-gray-800 no-page-break">
              <p className="font-bold text-lg sm:text-2xl text-gray-800 dark:text-white flex justify-between items-center pt-2 no-page-break">
                {category.category_name}
              </p>

              {/* Group items into rows */}
              <div className="mt-2">
                {Array.from(
                  { length: Math.ceil(category.filteredItems.length / 2) },
                  (_, rowIndex) => {
                    const startIndex = rowIndex * 2;
                    const rowItems = category.filteredItems.slice(
                      startIndex,
                      startIndex + 2
                    );

                    return (
                      <div
                        key={rowIndex}
                        className="flex justify-center flex-wrap md:justify-start gap-4 no-page-break"
                        style={{ pageBreakInside: "avoid", breakInside: "avoid" }}
                      >
                        {rowItems.map((item: any) => (
                          <PdfSideCard
                            item={item}
                            key={item.id}
                            currency={currency}
                          />
                        ))}
                        {/* Placeholder for single item in a row */}
                        {rowItems.length === 1 && <div className="w-60" />}
                      </div>
                    );
                  }
                )}
              </div>
            </div>
          </div>
        ))}
        <PdfSideLocation location={location} email={email} contact={contact} />
      </div>
    );
  }
);

export default Pdf;


import { Collapse, Divider } from "@mantine/core";
import React, { FC, useEffect, useRef, useState } from "react";
import { IItemdata } from "../item/AddItemModal";
import { FaAngleUp, FaAngleDown } from "react-icons/fa";
import useShortUrl from "../../hooks/useUrl";
import ThemeButton from "../ui/ThemeButton";
import CustomerSideCard from "./CustomerSideCard";
import CustomerSideLocation from "./CustomerSideLocation";
import { changeTheme } from "@/app/helper/changeTheme";
import BaseTextField from "../ui/BaseInput";
import { IoSearch } from "react-icons/io5";
import BaseButton from "../ui/BaseButton";
import Pdf from "../pdf/PdfSideBody";

type ICustomerSideBodyProps = {
  categories: any[] | null | undefined;
  id: string;
};

const CustomerSideBody: FC<ICustomerSideBodyProps> = ({ categories, id }) => {
  const [theme, setTheme] = useState<"dark" | "light">();
  const [mounted, setMounted] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [openCategories, setOpenCategories] = useState<string[]>(
    categories ? categories.map((c) => c.id) : []
  );

  const pdfRef = useRef<HTMLDivElement>(null); // Ref for Pdf component

  const logo = categories?.[0]?.menus?.restaurant_id?.logo;
  const name = categories?.[0]?.menus?.restaurant_id?.name;
  const contact = categories?.[0]?.menus?.restaurant_id?.phone;
  const location = categories?.[0]?.menus?.restaurant_id?.address;
  const email = categories?.[0]?.menus?.restaurant_id?.email;

  const urldata = useShortUrl(id);
  const urlid = urldata?.[0]?.menu_id;
  const currency = categories
    ?.map((item) => item.menus)
    .find((menu) => menu?.id === urlid)?.currency;

  useEffect(() => {
    const initialTheme = document.documentElement.classList.contains("dark")
      ? "dark"
      : "light";
    setTheme(initialTheme);
    setMounted(true);
  }, []);

  const handleThemeChange = async () => {
    await changeTheme();
    setTheme((prev) => (prev === "dark" ? "light" : "dark"));
  };

  useEffect(() => {
    if (theme) {
      document.documentElement.classList.toggle("dark", theme === "dark");
    }
  }, [theme]);

  const handleToggle = (categoryId: string) => {
    setOpenCategories((prev) =>
      prev.includes(categoryId)
        ? prev.filter((id) => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const filteredCategories = categories
    ?.map((category) => {
      const filteredItems = category.Items?.filter((item: IItemdata) =>
        item.name?.toLowerCase().includes(searchValue.toLowerCase())
      );
      return { ...category, filteredItems };
    })
    .filter(
      (category) =>
        category.status === "Available" &&
        category.filteredItems &&
        category.filteredItems.length > 0
    );

  const noMenusFound = filteredCategories?.length === 0;

  const handleDownloadPDF = async () => {
    if (pdfRef.current) {
      const html2pdf = (await import("html2pdf.js")).default;

      html2pdf()
        .from(pdfRef.current)
        .set({
          margin: 0.5,
          filename: "Menu.pdf",
          image: { type: "jpeg", quality: 0.98 },
          html2canvas: { scale: 2 },
          jsPDF: { unit: "in", format: "a4", orientation: "portrait" },
        })
        .save();
    }
  };

  return (
    <div className="space-y-8">
      {/* Hidden Pdf component for PDF generation */}
      <div className="hidden">
        <Pdf
          ref={pdfRef}
          filteredCategories={filteredCategories}
          currency={currency}
          logo={logo}
          name={name} openCategories={[]}        />
      </div>

      <Divider size="sm" />
      <p className="text-4xl text-center tracking-widest font-thin">MENU</p>
      <Divider size="sm" className="mb-4" />

      {mounted && theme && (
        <ThemeButton theme={theme} onChange={handleThemeChange} />
      )}

      <div className="flex justify-end gap-3 items-center">
        <BaseTextField
          value={searchValue}
          placeholder="Search menu..."
          onChange={(e) => setSearchValue((e.target as HTMLInputElement).value)}
          leftSection={
            <IoSearch
              size={20}
              className="hover:text-gray-700 dark:hover:text-gray-400"
            />
          }
        />

        <BaseButton
          onClick={handleDownloadPDF}
          classNames={{ root: "h-[53.5px] text-md font-extrabold" }}
        >
          Download Menu PDF
        </BaseButton>
      </div>

      {noMenusFound ? (
        <div className="text-center text-gray-500 dark:text-gray-300 font-medium text-lg">
          No Menus Found
        </div>
      ) : (
        filteredCategories?.map((category) => (
          <div key={category.id} onClick={() => handleToggle(category.id)} className="">
            <div className=" p-4 rounded-lg shadow-2xl dark:bg-gray-800">
              <p className="font-bold text-lg sm:text-2xl text-gray-800 dark:text-white flex justify-between items-center cursor-pointer hover:text-blue-600 transition-all duration-300 pt-2">
                {category.category_name}
                <span className="text-gray-500 text-sm">
                  {openCategories.includes(category.id) ? (
                    <FaAngleUp />
                  ) : (
                    <FaAngleDown />
                  )}
                </span>
              </p>

              <div className="mt-2 flex justify-center flex-wrap md:justify-start gap-4">
                {category.filteredItems.map((item: IItemdata) => (
                  <Collapse
                    in={openCategories.includes(category.id)}
                    key={item.id}
                  >
                    <CustomerSideCard item={item} currency={currency} />
                  </Collapse>
                ))}
              </div>
            </div>
          </div>
        ))
      )}

      <CustomerSideLocation
        location={location}
        email={email}
        contact={contact}
      />
    </div>
  );
};

export default CustomerSideBody;




import { Badge, Card, Text } from "@mantine/core";
import Image from "next/image";
import React, { FC } from "react";
import { IItemdata } from "../item/AddItemModal";

type IPdfSideCard = {
  item: IItemdata;
  currency: string;
};

const PdfSideCard: FC<IPdfSideCard> = (props) => {
  const { item, currency } = props;

  return (
    <Card
      shadow="sm"
      className="h-full flex flex-col w-60 dark:bg-gray-600 no-page-break relative" 
    >
      <div className=" max-w-xs overflow-hidden bg-cover bg-no-repeat ">
        <Image
          src={
            typeof item.image === "string"
              ? item.image
              : URL.createObjectURL(item.image as Blob)
          }
          width={500}
          height={500}
          alt="Website Logo"
          className="w-full max-h-44 min-h-56 object-cover  no-page-break "
          priority
        />
      </div>
      <div className="flex flex-row justify-between pt-2 dark:text-white">
        <Text className="font-semibold text-base sm:text-xl">{item.name}</Text>
        <Text className="font-bold text-base sm:text-xl dark:text-white">
          {currency}
          {item.price}
        </Text>
      </div>

      <Text className="text-sm text-gray-500 font-mono mt-3 cursor-pointer dark:text-white">
        {item.description}
      </Text>

      {item.status === "Not Available" && (
        <Badge
          color="red"
          variant="filled"
          classNames={{
            root: "absolute top-4 right-4 flex items-center rounded-sm",
          }}
          style={{
            top: "1rem", // Adjust top position to suit your needs
          }}
        >
          NOT AVAILABLE
        </Badge>
      )}
    </Card>
  );
};

export default PdfSideCard;


.no-page-break {
  page-break-inside: avoid;
  break-inside: avoid;
}

   breakInside: {
        avoid: "avoid",
      },
